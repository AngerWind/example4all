{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "Log",
				"type": "event"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "在多重继承中, 一个子类可以有多个父类, 父类有可以有多个父类, 最终构成一个DAG图 如下图:  O A -> O B -> O C -> O K1 -> B, A K2 -> C, A Z -> K2, K1 1. 在构造的时候, 不能同时构造两个同层级的父类, 那么应该按照什么顺序来构造父类对象 2. 在调用super.foo()的时候, 这里的super到底是指的哪一个 3. 那么在调用方法的时候, 子类往上寻找父类方法的顺序是什么？ 在python中使用C3 线性化来确定方法的调用顺序，也叫方法解析顺序（Method Resolution Order，MRO） 约定以下符号 - 如果A继承自B,C, 记为A->B, C - merge()表示merge算法 - L(A)表示A的线性化结果的简写 - [B, C, D] : 某个类的线性化结果的具体值 利用以上符号，该算法归纳如下： - 对于继承单个基类的情况 A->B, 则有L(A) = [A, B] - 对于继承多个基类的情况 A->B,C,D,则有 L(A) = [A] + merge(L(B), L(C), L(D) , [B,C,D]) - 对于merge([X], [Y], [Z]),遍历XYZ序列的第一个元素，若该元素是其他序列中的第一个元素，或不在其他序列出现， 则从所有序列中删除这个元素，合并到MRO中，继续遍历X的下一个元素；否则保留该元素，并查看下一个序列的第一个元素是否符合规则。 - 直到merge操作的序列为空 - 如果merge操作的序列无法为空，则说明不合法。 在python中, 确定Z的父类方法调用顺序的算法计算如下: L(O) := [O] L(A) := [A] + merge(L(O), [O]) = [A] + merge([O], [O]) = [A, O] L(B) := [B, O]//计算过程类似L(A) L(C) := [C, O]//计算过程类似L(A) L(K1) := [K1] + merge(L(B), L(A), [B, A]) = [K1] + merge([B, O], [A, O], [B, A]) //取一个序列的第一个元素，是其他序列中的第一个元素，或不在其他序列出现，符合条件是B = [K1, B] + merge([O], [A, O], [A]) = [K1, B, A] + merge([O], [O]) = [K1, B, A, O] L(K2) := [K2, C, A, O]//计算过程类似L(K1) L(Z) := [Z] + merge(L(K2), L(K1), [K2, K1]) = [Z] + merge([K2, C, A, O], [K1, B, A, O], [K2, K1]) = [Z, K2] + merge([C, A, O], [K1, B, A, O], [K1]) = [Z, K2, C] + merge([A, O], [K1, B, A, O], [K1]) = [Z, K2, C, K1] + merge([A, O], [B, A, O]) = [Z, K2, C, K1, B] + merge([A, O], [A, O]) = [Z, K2, C, K1, B, A] + merge([O], [O]) = [Z, K2, C, K1, B, A, O]",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"合约/_14_合约_继承_多重继承与线性化.sol": "O"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"合约/_14_合约_继承_多重继承与线性化.sol": {
			"keccak256": "0x387376c64b3aa140286eed11f381daae871f8b02c20fe8495ef59f4f566cec33",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://149cdd459980daaf88bd5c9c56d8a978fd3ffe1771e281cf1cdfff7e07b8964b",
				"dweb:/ipfs/QmcCTGzToVGvMYg7SSPuUodzW2HBhiN5KJh8VfDitNdMaT"
			]
		}
	},
	"version": 1
}