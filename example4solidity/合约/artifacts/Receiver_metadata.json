{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Received",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "amounts",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "receive接收以太: 一个合约最多有一个 receive 函数, 声明函数为： receive() external payable { ... } 可以是virtual, 可以被重载, 也可以有修改器 在对合约没有任何附加数据调用（通常是对合约转账）是会执行 receive 函数．　例如　通过 .send() or .transfer() or address{value: 100}.call(\"\") 如果 receive 函数不存在，就会调用payable的fallback回退函数 如果两个函数都没有，这个合约就没法通过常规的转账交易接收以太（会抛出异常） fallback回退函数: 合约可以最多有一个回退函数。函数声明为：  fallback () external [payable] fallback (bytes calldata input) external [payable] returns (bytes memory output) 可以是virtual的, 可以被重载, 可以有修改器 如果其他合约对当前合约的调用中, 没有函数与给定的函数标识符匹配, fallback会被调用 或者当其他合约向当前合约发送以太, 而当前合约没有receive函数时, 会调用payable的fallback函数 ",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"合约/_07_合约_特别的函数.sol": "Receiver"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"合约/_07_合约_特别的函数.sol": {
			"keccak256": "0xc43f6bafb6ee1ec6ac5bcd6901c69fe114152c135b69ef7d0447330868ee8e49",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://88b7fea5ecb1be72a566e0a2071702e65acee043e600289a7a973a04237d8a6d",
				"dweb:/ipfs/Qmb4srx7fUxZgdb7kweupWMM5D7JStT3hYuVCrcA9GF9nP"
			]
		}
	},
	"version": 1
}