{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "- solidity支持多重继承, 即一个合约可以继承多个合约 - 如果出现重写, 将调用子类的函数, 除非使用super关键字或者 父合约.方法 - 当一个合约从多个合约继承时，在区块链上只有一个合约被创建，所有基类合约（或称为父合约）的代码被编译到创建的合约中。 这意味着对基类合约函数的所有内部调用也只是使用内部函数调用（super.f（..）将使用JUMP跳转而不是消息调用）。 - 子类不能覆盖父类的状态变量",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"合约/_10_合约_继承.sol": "Owned"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"合约/_10_合约_继承.sol": {
			"keccak256": "0x2db7aca638edd581159e891a4c5ce4c17f00e9c04809a62e01c1b0f3f4cd389c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://70a5b405bdcbc3a871abd1d4278450e57e7f6942a6572795162b83d1f1f84bb7",
				"dweb:/ipfs/QmdBbLj8ETNj9iHDWg6a5esXTSTL1K6yg5Cj62y6zkqFDw"
			]
		}
	},
	"version": 1
}