// SPDX-License-Identifier:GPL-3.0
pragma solidity ^0.8.17;

/**
    在计算机的世界中, 正数使用原码表示, 负数使用补码表示

    原码: 即用第一位表示符号，其余位表示数值：
        【+1】= 原：[ 0000 0001 ]
        【-1】= 原：[ 1000 0001 ]

    反码: 
        正数的反码是其原码本身, 负数的反码是在其原码的基础上，符号位不变，其余各位取反。
        【+1】= 原： [ 0000 0001 ] = 反：[ 0000 0001 ]
        【-1】 = 原：[ 1000 0001 ] = 反：[ 1111 1110 ]

    补码: 
        正数的补码是其原码本身。
        负数的补码是在其原码的基础上，符号位不变，其余各位取反后加1（即在反码的基础上加1）。
        【+1】= 原： [ 0000 0001 ] = 反：[ 0000 0001 ] = 补：[ 0000 0001 ]
        【-1】= 原：[ 1000 0001 ] = 反：[ 1111 1110 ] = 补：[ 1111 1111 ]
 */

 /**
    如何通过补码计算数值:

    1. 已知补码[0000 0001]
        - 看符号位为0, 说明是正数, 其余位表示数值, 那么就是+1

    2. 已知补码[1000 0000]
        - 看符号位为0, 说明是负数
        - 其余位取反加1, 即[111 1111] + 1 = 127 + 1 = 128
  */