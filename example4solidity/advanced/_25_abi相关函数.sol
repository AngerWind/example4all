// SPDX-License-Identifier:GPL-3.0

pragma solidity ^0.8.17;

/**
 * ABI (Application Binary Interface，应用二进制接口)是与以太坊智能合约交互的标准。
 * 数据基于他们的类型编码；并且由于编码后不包含类型信息，解码时需要注明它们的类型。
 *
 * ABI编码有4个函数：
 *  abi.encode:
 *          详细编码规整查看_24_abi编码规则.sol
 *  abi.encodePacked
 *          encodePacked与encode相比, encode对每个数据都要求是32字节的倍数, 否则进行填充
            encodePacked不进行填充, 常常用在对数据进行hash
 *  abi.encodeWithSignature
            与abi.encode类似, 但是规定第一个参数必须是函数签名
 *  abi.encodeWithSelector
            与abi.encode类似, 但是第一个参数必须是函数选择器

 * 而ABI解码有1个函数：abi.decode，用于解码abi.encode的数据
 * 
 */

contract Tester {
    uint x = 10;
    address addr = 0x7A58c0Be72BE218B41C608b7Fe7C5bB630736C71;
    string name = "0xAA";
    uint[2] array = [uint(5), 6];

    function encode() public view returns (bytes memory result) {
        result = abi.encode(x, addr, name, array);
        /**
         * 0x000000000000000000000000000000000000000000000000000000000000000a // x
         *   0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c71 // addr
         *   00000000000000000000000000000000000000000000000000000000000000a0 // name数据部分起始位置
         *   0000000000000000000000000000000000000000000000000000000000000005 // 5
         *   0000000000000000000000000000000000000000000000000000000000000006 // 6
         *   0000000000000000000000000000000000000000000000000000000000000004 // name数据部分, 这行表示string转utf8后字节长度
         *   3078414100000000000000000000000000000000000000000000000000000000 // name的utf8字节码, 低位补0
         */
    }

    function encodePacked() public view returns (bytes memory result) {
        result = abi.encodePacked(x, addr, name, array);
        /**
         * 0x000000000000000000000000000000000000000000000000000000000000000a // x
         *   7a58c0be72be218b41c608b7fe7c5bb630736c71 // addr
         * 30784141 // name
         * 0000000000000000000000000000000000000000000000000000000000000005 // 5
         * 0000000000000000000000000000000000000000000000000000000000000006 // 6
         */
    }

    function encodeWithSignature() public view returns (bytes memory result) {
        result = abi.encodeWithSignature(
            "foo(uint256,address,string,uint256[2])",
            x,
            addr,
            name,
            array
        );
        /**
         * 0xe87082f1 // 函数选择器
         * 000000000000000000000000000000000000000000000000000000000000000a // 参考encode
         * 0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c71
         * 00000000000000000000000000000000000000000000000000000000000000a0
         * 0000000000000000000000000000000000000000000000000000000000000005
         * 0000000000000000000000000000000000000000000000000000000000000006
         * 0000000000000000000000000000000000000000000000000000000000000004
         * 3078414100000000000000000000000000000000000000000000000000000000
         */
    }

    function encodeWithSelector() public view returns (bytes memory result) {
        result = abi.encodeWithSelector(
            bytes4(keccak256("foo(uint256,address,string,uint256[2])")),
            x,
            addr,
            name,
            array
        );
        /**
         * 0xe87082f1
         * 000000000000000000000000000000000000000000000000000000000000000a
         * 0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c71
         * 00000000000000000000000000000000000000000000000000000000000000a0
         * 0000000000000000000000000000000000000000000000000000000000000005
         * 0000000000000000000000000000000000000000000000000000000000000006
         * 0000000000000000000000000000000000000000000000000000000000000004
         * 3078414100000000000000000000000000000000000000000000000000000000
         */
    }
}
